# Rolling update "www" containers of "frontend" deployment, updating the image
kubectl set image deployment/frontend www=image:v2    

# Check the history of deployments including the revision 
kubectl rollout history deployment/frontend          

# Rollback to the previous deployment
kubectl rollout undo deployment/frontend 

# Rollback to a specific revision
kubectl rollout undo deployment/frontend --to-revision=2  

# Watch rolling update status of "frontend" deployment until completion
kubectl rollout status -w deployment/frontend             

# Rolling restart of the "frontend" deployment
kubectl rollout restart deployment/frontend                      

# Replace a pod based on the JSON passed into std
cat pod.json | kubectl replace -f -                              

# Force replace, delete and then re-create the resource. Will cause a service outage.
kubectl replace --force -f ./pod.json

# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000
kubectl expose rc nginx --port=80 --target-port=8000

# Update a single-container pod's image version (tag) to v4
kubectl get pod <pod-name> -o yaml | sed 's/\(image: myimage\):.*$/\1:v4/' | kubectl replace -f -

#Adding a Label
kubectl label pods <pod-name> new-label=awesome                     

#Adding annotation
kubectl annotate pods <pod-name> icon-url=http://goo.gl/XXBTWq      

#Autoscale a Deployment
kubectl autoscale deployment <deployment-name> --min=2 --max=10                